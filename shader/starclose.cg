//Cg
//
//Cg profile arbvp1 arbfp1

void vshader(
    uniform float4x4 mat_modelproj,
    in float4 vtx_position : POSITION,
    out float4 l_position : POSITION)
{
    l_position = mul(mat_modelproj, vtx_position);
}

float4 dist_noise( sampler3D tex, float4 pos, float distortion, float aspect, float rolloff )
{
    // top octave is low frequency
    float4 scale = float4(0.125/aspect,0.125/aspect,0.125,1);
    float amp = 1.0;
    float amp_alpha = rolloff*rolloff;

    float4 offset = pos+0.5;
    offset = tex3D( tex, offset );
    offset *= distortion;
    float4 v = tex3D( tex, (pos+offset)*scale );
    scale *= 4.13; amp *= amp_alpha; v += (tex3D( tex, (pos+offset*amp)*scale )-0.5)*amp;
    scale *= 3.97; amp *= amp_alpha; v += (tex3D( tex, (pos+offset*amp)*scale )-0.5)*amp;

    return v;
}

 
void fshader(
	float4 l_coords    : TEXCOORD0,
    sampler3D tex_0 : TEXUNIT0,    // noise texture for planet
	sampler2D tex_1 : TEXUNIT1,    // layer 1 texture for planet
    out float4 o_color : COLOR)
{

	float distort = 1.0;
	float aspect = 1.0;
	float rolloff = 1.0;
	float4 noiseA = dist_noise( tex_0, l_coords, distort, aspect, rolloff);

	float2 uv = (lerp(noiseA, noiseA, 1).xy);
	float4 rgba = tex2D(tex_1, uv);

    o_color = rgba;
}
